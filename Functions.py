# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNAqcFCgJa-jkkCrMfG8ZwQ5thFR9Pli
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Data In Reg.dat**
*`[ID,Name]`*
> `*both in Str Format*`



"""

import pickle
def reg():
  user_input = input("Enter your Full Name/ID(Id preferred): ")
  try:
    with open("ResourcePacks/reg.dat", "rb") as f:
      while True:
        user_data = pickle.load(f)
        if user_input.title() in user_data:
          print("Are You", user_data[0], user_data[1])
          if input("Y/n: ") in "Yy":
            print("Welcome Back", user_data[1].title())
            return user_data[0], user_data[1]
  except EOFError:
    print("Looks Like A New Customer!")
    return new_reg()

import pickle
import random
def new_reg():
  name = input("Enter Full Name: ")
  ids = []
  try:
    with open("ResourcePacks/reg.dat", "rb") as f:
      while True:
        x = pickle.load(f)
        ids.append(x[0])
  except (EOFError, FileNotFoundError):
    pass
  while True:
    new_id = str(random.randint(1000, 9999))
    if new_id not in ids:
      print("ID:", new_id)
      with open("ResourcePacks/reg.dat", "ab") as f:
        pickle.dump([new_id, name.title()], f)
        with open(f"ResourcePacks/userdata/{new_id}.dat", "wb") as n:
        default_data = {
                "Book_No": None, "Book": None,
                "Rented_On": None, "Due_Date": None,
                "Return_Status": True
                }
        pickle.dump(default_data, n)
        return new_id, name.title()

def search():
  c=0
  try:
    with open("ResourcePacks/Book.dat", "rb") as f:
      a = input("Enter Book/Author Name: ").title()
      b="+------------------------------------------------------------------------------------------------------+"
      print(b)
      print("| ID   |           Book Title           | Volume |        Author        | Rent Amount |  Availability  |")
      print(b)
      if a in x[1] or a in x[3]:
        while True:
          x = pickle.load(f)
          book_display(x)
          c+=1
  except EOFError:
    if not c:
      print("|"+" "*(((len(b)-len("Book Not Found"))//2)-1)+"BOOK NOT FOUND"+" "*(((len(b)-len("Book Not Found"))//2)-1)+"|")
    print(b)

import pickle
def due(user_id, name):
  try:
    with open(f"ResourcePacks/userdata/{user_id}.dat", "rb") as f:
      data = pickle.load(f)
      if not data["Return_Status"]:
        print(f"*Notice: A Book {data['Book']} is due by {data['Due_Date']}")
        return data["Return_Status"]
      else:
        print("No Dues")

import pickle
def rent(user_id, name):
  with open(f"ResourcePacks/userdata/{user_id}.dat", "rb") as f:
    user_data = pickle.load(f)
  if not user_data["Return_Status"]:
    print("A Book Is Pending To Be Returned")
    return
  bookname = input("Enter Book Name: ").title()
  try:
    with open("ResourcePacks/Book.dat", "rb+") as n:
      while True:
        a = n.tell()
        book_data = pickle.load(n)
        if bookname in book_data[2]:
          if input(f"You Mean {book_data[1]} by {book_data[3]} Volume {book_data[2]} (Y/n): ") in "Yy":
            if book_data[-1]:
              user_data["Book_No"] = book_data[0]
              user_data["Book"] = book_data[1]
              user_data["Rented_On"] = input("Today's Date (DD/MM/YYYY): ")
              user_data["Due_Date"] = input("Due Date (DD/MM/YYYY): ")
              user_data["Return_Status"] = False
              book_data[-1] = False
              if input(f"Rent Amount ₹{book_data[-2]} Paid (Y/n): ") in "Yy":
                print("Successfully Rented")
                with open(f"ResourcePacks/userdata/{user_id}.dat", "wb") as f_user:
                  pickle.dump(user_data, f_user)
                  n.seek(a)
                  pickle.dump(book_data, n)
            else:
              print("Book Not Available")
              break
  except EOFError:
      print("Book Not Found")

import pickle
def return_book(user_id, name):
  try:
    with open(f"ResourcePacks/userdata/{user_id}.dat", "rb") as f:
      user_data = pickle.load(f)
    if not user_data["Return_Status"]:
      print(f"{name} needs to return {user_data['Book']}")
      if input("Returning it (Y/n): ") in "Yy":
        print(f"Due Date: {user_data['Due_Date']}")
        fine = input("Fine: ")
        print(f"Fine paid: ₹{fine}")
        with open("ResourcePacks/Book.dat", "rb+") as p:
          while True:
            try:
              a = p.tell()
              book = pickle.load(p)
              if user_data["Book_No"] == book[0]:
                book[-1] = True
                p.seek(a)
                pickle.dump(book, p)
                break
            except EOFError:
              print("Book record not found.")
              return
          user_data = {
            "Book_No": None, "Book": None,
            "Rented_On": None, "Due_Date": None,
            "Return_Status": True
            }
          with open(f"ResourcePacks/userdata/{user_id}.dat", "wb") as f:
            pickle.dump(user_data, f)
      else:
        print(f"Return by {user_data['Due_Date']}")
    else:
      print("You Have No Books In Due")

"""# **How Datas Are Ordered in Book.dat**
*`[Book ID, Book Title, Volume, Author, Rent Amount, Availability]`*
---
*availability should only contain 1 or 0*





"""

import pickle
def add():
  L = []
  with open("ResourcePacks/Book.dat", "ab+") as f:
    f.seek(0)
    try:
      while True:
        x = pickle.load(f)
        L.append(x[0])
    except EOFError:
      while True:
        while True:
          book_id =random.randint(1000,9999)
          if book_id not in L:
            print(f"Book ID: {book_id}")
            break
        book_title = input("Enter the Book Title: ").title()
        volume = input("Enter the Volume: ")
        author = input("Enter the Author: ").title()
        rent_amount = input("Enter the Rent Amount: ")
        availability = True
        book_entry = [book_id, book_title.title(), volume, author.title(), rent_amount, availability]
        pickle.dump(book_entry, f)
        L.append(book_id)
        if input("Do you wish to add more books? (Y/n): ") in "Nn":
          break

import pickle
def feedback():
  feedback_text = input("Enter your feedback:\n")
  with open("ResourcePacks/feedback.dat", "ab") as f:
    pickle.dump(feedback_text, f)
    print("Thank You For Your Feedback.")

import pickle
def view():
  with open("ResourcePacks/Book.dat", "rb") as f:
    print("\t\t\t\tLIBRARY BOOKS")
    print("+------------------------------------------------------------------------------------------------------+")
    print("| ID   |           Book Title           | Volume |        Author        | Rent Amount |  Availability  |")
    print("+------------------------------------------------------------------------------------------------------+")
    while True:
      try:
        book = pickle.load(f)
        book_display(book)
      except EOFError:
        print("+------------------------------------------------------------------------------------------------------+")
        break

import os
import pickle
def delete_account(user_id,name):
  if not due(user_id,name):
    print("Deleting Failed")
    return
  with open("ResourcePacks/reg.dat", "rb") as f:
    L=[]
    while True:
      try:
        x = pickle.load(f)
        if x == [user_id, name.title()]:
          os.remove(f"ResourcePacks/userdata/{user_id}.dat")
          continue
        L.append(x)
      except EOFError:
        break
  with open("ResourcePacks/reg.dat", "wb") as f:
    for i in L:
      pickle.dump(i,f)

import pickle
def users():
  UserIds=[]
  with open("ResourcePacks/reg.dat", "rb") as f:
    try:
      while True:
        x=pickle.load(f)
        UserIds.append(x)
    except EOFError:
      return UserIds

def book_display(book):
  book_id = book[0]
  title = book[1]
  volume = book[2]
  author = book[3]
  rent = str(book[4])
  if len(title) > 30:
    title = title[:27] + "..."
  else:
    title = title + " " * (30 - len(title))
  if len(volume) == 1:
    volume = "0" + volume
  elif len(volume) > 2:
    volume = volume[:2]
  if len(author) > 20:
    author = author[:17] + "..."
  else:
    author = author + " " * (20 - len(author))
  rent = " " * (11 - len(rent)) + rent
  availability = str(book[5])
  availability += " " * (13 - len(availability))
  print(f"| {book_id} | {title} |   {volume}   | {author} | {rent} | {availability}  |")
